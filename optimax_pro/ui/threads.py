"""
–†–∞–±–æ—á–∏–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è Optimax Pro
"""

import time
import psutil
import wmi
import logging
from PyQt6.QtCore import QThread, pyqtSignal

class StressTestThread(QThread):
    """–ü–æ—Ç–æ–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CPU"""
    progress = pyqtSignal(int)
    finished = pyqtSignal()

    def run(self):
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞"""
        try:
            for i in range(100):
                # –°–æ–∑–¥–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ CPU
                for _ in range(1000000):
                    _ = 2 ** 20

                self.progress.emit(i + 1)
                time.sleep(0.1)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞: {e}")
        finally:
            self.finished.emit()

class AIAnalysisThread(QThread):
    """–ü–æ—Ç–æ–∫ AI –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã"""
    result = pyqtSignal(str)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∏—Å—Ç–µ–º–µ
            cpu_usage = psutil.cpu_percent(interval=1)
            ram_usage = psutil.virtual_memory().percent
            disk_usage = psutil.disk_usage("C:").percent
            temp = self.get_cpu_temp()

            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
            score = 100 - (cpu_usage * 0.3 + ram_usage * 0.4 + disk_usage * 0.2 + (temp / 100) * 0.1)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = []

            if cpu_usage > 80:
                recommendations.append("üî• –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.")
            if ram_usage > 90:
                recommendations.append("üî• –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ RAM. –£–≤–µ–ª–∏—á—å—Ç–µ –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
            if disk_usage > 95:
                recommendations.append("üíæ –î–∏—Å–∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –û—á–∏—Å—Ç–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã.")
            if temp > 85:
                recommendations.append("üå°Ô∏è –ü–µ—Ä–µ–≥—Ä–µ–≤ CPU. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ.")

            if not recommendations:
                recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = f"–û—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {score:.1f}/100\n\n"
            result_text += "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            result_text += "\n".join(recommendations)

            self.result.emit(result_text)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self.result.emit("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏—Å—Ç–µ–º—ã")

    def get_cpu_temp(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã CPU"""
        try:
            w = wmi.WMI(namespace="root\\OpenHardwareMonitor")
            sensors = w.Sensor()
            for sensor in sensors:
                if sensor.SensorType == "Temperature" and "CPU" in sensor.Name:
                    return sensor.Value
            return 50  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        except Exception:
            return 50  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

class OptimizationThread(QThread):
    """–ü–æ—Ç–æ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    progress = pyqtSignal(int)
    finished = pyqtSignal()

    def __init__(self, tweak_cards):
        super().__init__()
        self.tweak_cards = tweak_cards

    def run(self):
        """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            total_tweaks = len(self.tweak_cards)

            for i, card in enumerate(self.tweak_cards):
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–≤–∏–∫
                    card.tweak_function()

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    progress = int((i + 1) / total_tweaks * 100)
                    self.progress.emit(progress)

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                    time.sleep(0.1)

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–≤–∏–∫–∞ {card.title}: {e}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        finally:
            self.finished.emit()

class CleanupThread(QThread):
    """–ü–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    progress = pyqtSignal(int)
    finished = pyqtSignal()

    def __init__(self, cleanup_functions):
        super().__init__()
        self.cleanup_functions = cleanup_functions

    def run(self):
        """–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏"""
        try:
            total_tasks = len(self.cleanup_functions)

            for i, cleanup_func in enumerate(self.cleanup_functions):
                try:
                    cleanup_func()

                    progress = int((i + 1) / total_tasks * 100)
                    self.progress.emit(progress)

                    time.sleep(0.1)

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        finally:
            self.finished.emit()
